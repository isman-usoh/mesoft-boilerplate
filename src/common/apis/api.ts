// tslint:disable
/**
 * meschool
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:3000/api/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<any>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AuthLoginBody
 */
export interface AuthLoginBody {
    /**
     * 
     * @type {string}
     * @memberof AuthLoginBody
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLoginBody
     */
    password: string;
}

/**
 * 
 * @export
 * @interface AuthRegisterBody
 */
export interface AuthRegisterBody {
    /**
     * 
     * @type {string}
     * @memberof AuthRegisterBody
     */
    firstname: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegisterBody
     */
    lastname: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegisterBody
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegisterBody
     */
    password: string;
}

/**
 * 
 * @export
 * @interface IUserInfoDTO
 */
export interface IUserInfoDTO {
    /**
     * 
     * @type {number}
     * @memberof IUserInfoDTO
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof IUserInfoDTO
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof IUserInfoDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof IUserInfoDTO
     */
    accessToken: string;
    /**
     * 
     * @type {Date}
     * @memberof IUserInfoDTO
     */
    expiredTime: Date;
}


/**
 * AuthApi - fetch parameter creator
 * @export
 */
export const AuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authInfo(options: any = {}): FetchArgs {
            const path = `/auth/info`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication MehubAuth required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @param {AuthLoginBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin(body?: AuthLoginBody, options: any = {}): FetchArgs {
            const path = `/auth/login`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'POST' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(body || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogout(options: any = {}): FetchArgs {
            const path = `/auth/logout`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'GET' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            // authentication MehubAuth required
            if (configuration && configuration.apiKey) {
                const apiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                headerParameter["Authorization"] = apiKeyValue;
            }

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
        /**
         * 
         * @param {AuthRegisterBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister(body?: AuthRegisterBody, options: any = {}): FetchArgs {
            const path = `/auth/register`;
            const urlObj = url.parse(path, true);
            const requestOptions = Object.assign({ method: 'POST' }, options);
            const headerParameter = {} as any;
            const queryParameter = {} as any;

            headerParameter['Content-Type'] = 'application/json';

            urlObj.query = Object.assign({}, urlObj.query, queryParameter, options.query);
            requestOptions.headers = Object.assign({}, headerParameter, options.headers);
            requestOptions.body = JSON.stringify(body || {});

            return {
                url: url.format(urlObj),
                options: requestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authInfo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IUserInfoDTO> {
            const fetchArgs = AuthApiFetchParamCreator(configuration).authInfo(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {AuthLoginBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin(body?: AuthLoginBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IUserInfoDTO> {
            const fetchArgs = AuthApiFetchParamCreator(configuration).authLogin(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogout(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const fetchArgs = AuthApiFetchParamCreator(configuration).authLogout(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {AuthRegisterBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister(body?: AuthRegisterBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IUserInfoDTO> {
            const fetchArgs = AuthApiFetchParamCreator(configuration).authRegister(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authInfo(options?: any) {
            return AuthApiFp(configuration).authInfo(options)(fetch, basePath);
        },
        /**
         * 
         * @param {AuthLoginBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin(body?: AuthLoginBody, options?: any) {
            return AuthApiFp(configuration).authLogin(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogout(options?: any) {
            return AuthApiFp(configuration).authLogout(options)(fetch, basePath);
        },
        /**
         * 
         * @param {AuthRegisterBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister(body?: AuthRegisterBody, options?: any) {
            return AuthApiFp(configuration).authRegister(body, options)(fetch, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authInfo(options?: any) {
        return AuthApiFp(this.configuration).authInfo(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogin(body?: AuthLoginBody, options?: any) {
        return AuthApiFp(this.configuration).authLogin(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogout(options?: any) {
        return AuthApiFp(this.configuration).authLogout(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRegister(body?: AuthRegisterBody, options?: any) {
        return AuthApiFp(this.configuration).authRegister(body, options)(this.fetch, this.basePath);
    }

}

